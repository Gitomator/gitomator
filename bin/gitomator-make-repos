#!/usr/bin/env ruby

require 'bundler/setup'
require 'gitomator/util/script_util'
require 'gitomator/context'
require 'gitomator/task/make_repos'
require 'gitomator/task/config/repos_config'

usage_message  = "Usage: #{File.basename($0)} ASSIGNMENT-CONFIG"
banner = <<-EOS
Command-line tool to create repos based on a configuration file.

  #{usage_message}

Repos can be created empty, or based on an existing source_repo (specified in the configuration file).
EOS

parser = Gitomator::ScriptUtil::DefaultOptionParser.new(banner)
parser.opt :update_existing,
    "Update existing repos by pushing recent changes from the source_repo",
    :default => false

opts = parser.parse(ARGV)
abort usage_message if ARGV.length != 1

context     = Gitomator::Context.from_file(opts[:context])

config_hash = Gitomator::Util.load_config(ARGV[0])
task_config = Gitomator::Task::Config::ReposConfig.new(config_hash)

task_opts = {}
if task_config.source_repo
  task_opts[:source_repo] = task_config.source_repo
end
if task_config.repo_properties
  task_opts[:repo_properties] = task_config.repo_properties.map {|k,v| [k.to_sym,v]} .to_h
end
if opts[:update_existing]
  task_opts[:update_existing] = true
end


Gitomator::ScriptUtil::run_task(
  Gitomator::Task::MakeRepos.new(context, task_config.repos, task_opts)
)
